openapi: 3.0.3
info:
  title: Swagger Bike sharing app - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8084
tags:
  - name: stands
    description: Operations with stands
  - name: bikes
    description: Operations with bikes
  - name: ride
    description: Operations with bikes, stands and user
paths:

  /stand/location:
    get:
      tags:
        - stands
      summary: Returns location of stand on map
      description: get request for fetching location of concrete stand or all of them
      operationId: fetchStands
      parameters:
        - in: query
          name: standId
          required: true
          schema:
            type: number
          description: Numeric ID of the stand to get
      responses:
        '200':
          description: successful fetch of stand location - available to all
            users of the website regardless of their role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectsLocation'
        '404':
          description: stand with id standId not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandNotFound'


#  /bike/change_state:
#    put:
#      tags:
#        - bikes
#      summary: Changes state of bike to serviced/unserviced
#      operationId: changeBikeState
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/BikeState'
#      responses:
#        '200':
#          description: successful change of bike state (operation/service)
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  message:
#                    type: string
#                    example: "State of bike {bike_id} changed to {state}"
#        '401':
#          description: unauthorized attempt to change bike state.
#            User is not a serviceman.
#

  /bike/list:
    get:
      tags:
        - bikes
      summary: Returns all bikes with metadata about them
      description: get request for fetching information's about bikes
      operationId: fetchBikes
      responses:
        '200':
          description: successful fetch rideable bikes - available to all
            users of the website regardless of their role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bikes'
        '401':
          description: User is not logged in

  /bike/service:
    put:
      tags:
        - bikes
      summary: marks bike as serviced
      operationId: changeBikeState
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeState'
      responses:
        '200':
          description: successful change of bike state (operation/service)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "State of bike {bike_id} changed to {state}"
        '401':
          description: unauthorized attempt to change bike state.
            User is not a serviceman.
    get:
      tags:
        - bikes
      summary: return all bikes up for service
      description: get request for fetching bikes due for service
      operationId: fetchServiceableBikes
      responses:
        '200':
          description: successful fetch of bikes up for service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bikes'
        '401':
          description: User is not logged in or is not a serviceman


  /bike/location:
    get:
      tags:
        - bikes
      summary: Returns location of bike(s) on map
      description: get request for fetching location of concrete bike or all of them
        WEB SOCKET ENDPOINT
      operationId: fetchBikeLocations
      parameters:
        - in: query
          name: bikeId
          required: false
          schema:
            type: integer
          description: Id of bike of whose location user is interested in
      responses:
        '200':
          description: successful fetch of bike location - available to all
            users of the website regardless of their role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectsLocation'
        '404':
          description: bike with id bikeId not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeNotFound'
  /ride/start:
    post:
      tags:
        - ride
      summary: starts a ride on a bike for logged in user
      description: post request when user starts a ride on a bike from a stand to a stand
      operationId: rideStart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RideStart'
      responses:
        '201':
          description: bike ride started
          content:
            application/json:
              schema:
                type: object
                properties:
                  rideId:
                    type: integer
                    example: 1
                  token:
                    type: string
                  message:
                    type: string
                    example: "Ride {rideId} on a bike {bikeId} from stand {startId} to stand {endId} from user {userEmail} started."
        '401':
          description: User is not logged in the system, starting a ride is not possible.
        '404':
          description: Bike, stand or user doesnt exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bike, stand or user doesnt exist."
        '400':
          description: Bike is not available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot ride bike {bikeId}. Bike is being serviced or someone else is using it."


  /ride/list:
    get:
      tags:
        - ride
      summary: fetches all rides of user
      description: get request for list of user rides
      operationId: rideList
      parameters:
          - in: query
            name: userId
            required: true
            schema:
              type: integer
            description: id of user whose rides will be fetched
      responses:
        '200':
          description: 'Fetched user rides'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRides'
        '401':
          description: Unauthorized request.
        '404':
          description: User rides not found.



components:
  schemas:
    StandNotFound:
      properties:
        message:
          type: string
          example: "stand with id 42 not found"

    BikeNotFound:
      properties:
        message:
          type: string
          example: "bike with id 42 not found"

    RideStart:
      properties:
        userEmail:
          type: string
          example: "hello@world.com"
        startStandId:
          type: integer
          example: 1
        endStandId:
          type: integer
          example: 1
        bikeId:
          type: integer
          example: 34

    BikeState:
      properties:
        userEmail:
          type: string
          example: "hello@world.com"
        bike_id:
          type: integer
          example: 2
        serviced_stamp:
          type: string
          format: date-time
          example: "2023-11-16 14:20:00.000000"


    ObjectLocation:
      properties:
        id:
          type: integer
          format: int64
          example: 10
        location:
          type: object
          properties:
            longitude:
              type: number
              example: 4,23
            latitude:
              type: number
              example: 5
    BikeDto:
      properties:
        id:
          type: integer
          format: int64
          example: 1
        location:
          type: object
          properties:
            longitude:
              type: number
              example: 4,23
            latitude:
              type: number
              example: 5

    Bikes:
      type: array
      items:
        $ref: '#/components/schemas/BikeDto'

    UserRide:
      properties:
        rideId:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
        bikeId:
          type: integer
          format: int64
          example: 1
        startStandId:
          type: integer
          format: int64
          example: 1
        endStandId:
          type: integer
          format: int64
          example: 2
        rideStart:
          type: string
          format: date-time
        rideEnd:
          type: string
          format: date-time

    UserRides:
      type: array
      items:
        $ref: '#/components/schemas/UserRide'

    ObjectsLocation:
      type: array
      items:
        $ref: '#/components/schemas/ObjectLocation'

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        role:
          example: "SERVICEMAN"
          type: string
          enum: [ "SERVICEMAN", "REGULAR" ]
          x-enum-varnames: [ SERVICEMAN, REGULAR ]
