
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
    CI: false
    bike_sharing_artifact_name: bike_sharing
    bike_sharing_auth_artifact_name: bike_sharing_auth
    bike_sharing_location_artifact_name: bike_sharing_location
    bike_sharing_ui_artifact_name: bike-sharing-ui


jobs:
  test:
    name: Test all apps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Bike Sharing test
        run: |
          cd bike_sharing
          mvn test

      - name: Bike Sharing Auth test
        run: |
          cd bike_sharing_auth
          mvn test

      - name: Bike Sharing location test
        run: |
          cd bike_sharing_location
          mvn test

      - name: Set up NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Bike Sharing UI test
        run: |
          cd bike_sharing_ui
          npm ci
          npm test

  build:
    name: Build all apps
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Bike Sharing
        run: |
          cd bike_sharing
          mvn clean install

      - name: Save Artifact from Bike Sharing
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.bike_sharing_artifact_name}}
          path: bike_sharing/target/bike_sharing-0.0.1-SNAPSHOT.war

      - name: Build Bike Sharing Auth
        run: |
          cd bike_sharing_auth
          mvn clean install

      - name: print Bike Sharing Auth
        run: |
          cd bike_sharing_auth
          cd target
          ls

      - name: Save Artifact from Bike Sharing Auth
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.bike_sharing_auth_artifact_name}}
          path: bike_sharing_auth/target/authenticator-0.0.1-SNAPSHOT.war

      - name: Build Bike Sharing Location
        run: |
          cd bike_sharing_location
          mvn clean install

      - name: print Bike Sharing Location
        run: |
          cd bike_sharing_location
          cd target
          ls

      - name: Save Artifact from Bike Sharing Location
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.bike_sharing_location_artifact_name}}
          path: bike_sharing_location/target/bike_sharing_location-0.0.1-SNAPSHOT.war

      - name: Set up NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Build Bike Sharing UI
        run: |
          cd bike_sharing_ui
          npm ci
          npm run build
          tar -czvf bike_sharing_ui.tar.gz build nginx.conf


      - name: Save Artifact from Bike Sharing UI
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.bike_sharing_ui_artifact_name}}
          path: bike_sharing_ui/bike_sharing_ui.tar.gz

      #- name: Copy artifacts for production run
      #  run: |
      #    cd bike_sharing_ui
      #    cp ./nginx.conf /etc/nginx/conf.d/default.conf
      #    cp -r /build/* /usr/share/nginx/html
          
  Artifacts_production:
    name: Copies all artifacts to production server
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download bike_sharing artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{env.bike_sharing_artifact_name}}
          path: distfiles/bike_sharing

      - name: Download bike_sharing_auth artifact
        uses: actions/download-artifact@v4
        with:
            name: ${{env.bike_sharing_auth_artifact_name}}
            path: distfiles/auth
      
      - name: Download bike_sharing_location artifact
        uses: actions/download-artifact@v4
        with:
              name: ${{env.bike_sharing_location_artifact_name}}
              path: distfiles/location

      - name: Download bike_sharing_ui artifact
        uses: actions/download-artifact@v4
        with:
              name: ${{env.bike_sharing_ui_artifact_name}}
              path: distfiles/react
              
      - name: Upload downloaded artifacts to target node
        uses: appleboy/scp-action@v0.1.7
        with:
              host: ${{ secrets.HOST_NODE }}
              username: ${{ secrets.NODE_USERNAME }}
              key: ${{ secrets.SSH_KEY }}
              source: distfiles/*
              target: /home/nodeadm
          
  Ansible_deploy:
    name: Run ansible playbook
    needs: Artifacts_production
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' 
    
    - name: Install ansible 
      run: pip install ansible
      #necessary to create a file with private key for ansible playbook
    - name: Retrieve SSH Key
      run: echo "${{ secrets.SSH_KEY }}" > ssh_key.pem && chmod 600 ssh_key.pem



    - name: Run Ansible playbook
      run: ansible-playbook -i ansible/inventories/practise/ ansible/playbook_apps.yml --private-key=ssh_key.pem