openapi: 3.0.3
info:
  title: Swagger Bike sharing app - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user
    description: Operations about user
  - name: oauth2
    description: Oauth login
paths:
  /user/register:
    post:
      tags:
        - user
      summary: Create user
      description: Creates user of bike sharing system
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoggedIn'
        '409':
          description: user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExists'

  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoggedIn'
        '404':
          description: user doesnt exist

  /user/logout:
    get:
      tags:
        - user
      summary: Invalidates user token
      description: ''
      operationId: logoutUser
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      responses:
        default:
          description: successful operation

  /user/change_role:
    put:
      tags:
        - user
      summary: Changes role of user
      description: Changes the current role of user (regular or serviceman)
      operationId: changeRole
      requestBody:
        description: User role change dto. Email is the email of the user, role maps to enum (1) serviceman 0 regular
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangeRole'
      responses:
        '200':
          description: successful operation
        '401':
          description: unauthorized

  /user/rides:
      get:
        tags:
          - user
        summary: returns all rides of user
        description: get request for ride history
          called by user service
        operationId: userRidesList
        parameters:
          - in: query
            name: userEmail
            required: true
            schema:
              type: string
            description: email of user whose ride history is requested
        responses:
          '200':
            description: successful fetch of user rides
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Rides'
          '401':
            description: User is not logged in

  /user/list:
    get:
      tags:
        - user
      summary: returns all users
      operationId: userList
      parameters:
        - in: query
          name: serviceMen
          required: true
          schema:
            type: integer
          description: 1/0 flag if only servicemen should be fetched. 1 = true - fetches serviceman
      responses:
        '200':
          description: successful fetch of user rides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          description: User is not logged in

  /user/user_info:
    get:
        tags:
          - user
        summary: returns information about user
        operationId: userInfo
        parameters:
          - in: query
            name: userEmail
            required: true
            schema:
              type: string
            description: email of user whose information will be fetched
        responses:
          '200':
            description: user found, sending information
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: Unauthorized request
          '404':
            description: user not found
          '400':
            description: invalid user email

  /oauth2/login/google:
    get:
      tags:
        - oauth2
      summary: Login via google oauth service
      description: Login with google service
      operationId: oauth2login
      responses:
        '200':
          description: successful login via google
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoggedIn'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        role:
          example: "SERVICEMAN"
          type: string
          enum: [ "SERVICEMAN", "REGULAR" ]
          x-enum-varnames: [ SERVICEMAN, REGULAR ]


    UserCreate:
      type: object
      required:
        - username
        - email
        - password
        - usertype
      properties:
        username:
          type: string
          example: 'username'

        email:
          type: string
          example: 'user@user.com'
        password:
          type: string
          example: '12345'
        usertype:
          example: "SERVICEMAN"
          type: string
          enum: [ "SERVICEMAN", "REGULAR" ]
          x-enum-varnames: [ SERVICEMAN, REGULAR ]

    UserExists:
      type: object

      properties:
        message:
          type: string
          example: "user with email user@user.com exists"

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          example: "user@user.com"
          type: string
        password:
          example: "12345"
          type: string

    UserChangeRole:
      type: object
      properties:
        email:
          example: "user@user.com"
          type: string
        role:
          example: "SERVICEMAN"
          type: string
          enum: [ "SERVICEMAN", "REGULAR" ]
          x-enum-varnames: [ SERVICEMAN, REGULAR ]

    UserLoggedIn:
      type: object
      properties:
        token:
          type: "string"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    Bike:
      properties:
        id:
          type: integer
          format: int64
          example: 1
        location:
          type: object
          properties:
            longitude:
              type: number
              example: 4,23
            latitude:
              type: number
              example: 5
        state:
          type: string
          enum: [ "RIDEABLE", "SERVICE" ]
          x-enum-varnames: [ RIDEABLE, SERVICE ]

    Ride:
      properties:
        rideId:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
        bikeId:
          type: integer
          format: int64
          example: 1
        startStandId:
          type: integer
          format: int64
          example: 1
        endStandId:
          type: integer
          format: int64
          example: 2
        rideStart:
          type: string
          format: date-time
        rideEnd:
          type: string
          format: date-time


    ObjectLocation:
      properties:
        id:
          type: integer
          format: int64
          example: 10
        location:
          type: object
          properties:
            longitude:
              type: number
              example: 4,23
            latitude:
              type: number
              example: 5

    Rides:
      type: array
      items:
        $ref: '#/components/schemas/Ride'

    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'